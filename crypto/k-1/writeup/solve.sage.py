

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
from pwn import *

#p = process(['python3', '../src/chall.py'])
p = remote('localhost', '10000')

xy = []
k = int(p.recvuntil(b'\n')[len('k = '):-_sage_const_1 ].decode())
for _ in range(k - _sage_const_1 ):
    xy.append(eval(p.recvuntil(b'\n')[:-_sage_const_1 ]))

rows = []

cols = []
for i in range(len(xy)):
    cols.append(xy[i][_sage_const_1 ])
cols.append(_sage_const_1 )
rows.append(cols[:])

for i in range(_sage_const_1 , k):
    cols = []
    for j in range(k - _sage_const_1 ):
        cols.append(-xy[j][_sage_const_0 ]**i)
    cols.append(_sage_const_1 )
    rows.append(cols[:])

L = Matrix(rows)
print(f'{k = }')
L = L.LLL()
#pretty_print(L)
print(str(L[_sage_const_1 ][_sage_const_0 ]).encode())

p.sendlineafter(b'password: ', str(L[_sage_const_1 ][_sage_const_0 ]).encode())
p.interactive()

'''
# example, the result should be 1337
(x1, y1) = (10880, 7225308917177)
(x2, y2) = (1249, 95288335886)


L = Matrix(
    [
        [y1, y2, 1],
        [-x1, -x2, 1],
        [-x1^2, -x2^2, 1],
    ]
)

pretty_print(L.LLL())
'''

